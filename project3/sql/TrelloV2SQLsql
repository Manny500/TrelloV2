--PORTAL_DB connection grant
CREATE USER PORTAL_DB IDENTIFIED BY p4ssw0rd;
GRANT CONNECT, RESOURCE TO PORTAL_DB;
/

--PORTAL_DB DDL
CREATE TABLE ROLE_TYPE
  (
    RT_ID   INT,
    RT_NAME VARCHAR2(4000) UNIQUE,
    PRIMARY KEY(RT_ID)
  );
/
CREATE TABLE TV2_USER
  (
    TV2_ID       INT,
    TV2_FN       VARCHAR2(4000),
    TV2_LS       VARCHAR2(4000),
    TV2_USERNAME VARCHAR2(4000) UNIQUE NOT NULL,
    TV2_PASSWORD VARCHAR2(4000) NOT NULL,
    TV2_TEAM INT DEFAULT 0,
    RT_ID    INT DEFAULT 1 NOT NULL,
    TV2_EMAIL    VARCHAR2(4000),
    PRIMARY KEY(TV2_ID)
  );
/
CREATE SEQUENCE role_type_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE tv2_user_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER role_type_seq_trg BEFORE
  INSERT ON role_type FOR EACH ROW BEGIN IF :new.rt_id IS NULL THEN
  SELECT role_type_seq.NEXTVAL INTO :new.rt_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER user_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID IS NULL THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/
create or replace TRIGGER user2_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID = 0  THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/

COMMIT;
/

--PORTAL_DB DML
INSERT INTO TV2_USER VALUES (1,'Jon','Snow','j','j',1,1,'imabastard@gmail.com');
COMMIT;
/
INSERT INTO ROLE_TYPE VALUES (1,'user');
COMMIT;
/




--PROFILE_DB connection grant
CREATE USER PROFILE_DB IDENTIFIED BY p4ssw0rd;
GRANT CONNECT, RESOURCE TO PROFILE_DB;
/

--PROFILE_DB DDL
CREATE TABLE ROLE_TYPE
  (
    RT_ID   INT,
    RT_NAME VARCHAR2(4000) UNIQUE,
    PRIMARY KEY(RT_ID)
  );
/
CREATE TABLE TV2_USER
  (
    TV2_ID       INT,
    TV2_FN       VARCHAR2(4000),
    TV2_LS       VARCHAR2(4000),
    TV2_USERNAME VARCHAR2(4000) UNIQUE NOT NULL,
    TV2_PASSWORD VARCHAR2(4000) NOT NULL,
    TV2_TEAM INT DEFAULT 0,
    RT_ID    INT DEFAULT 1 NOT NULL,
    TV2_EMAIL    VARCHAR2(4000),
    PRIMARY KEY(TV2_ID)
  );
/
CREATE SEQUENCE role_type_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE tv2_user_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER role_type_seq_trg BEFORE
  INSERT ON role_type FOR EACH ROW BEGIN IF :new.rt_id IS NULL THEN
  SELECT role_type_seq.NEXTVAL INTO :new.rt_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER user_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID IS NULL THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/
create or replace TRIGGER user2_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID = 0  THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/

COMMIT;
/

--PROFILE_DB DML
INSERT INTO TV2_USER VALUES (1,'Jon','Snow','j','j',1,1,'imabastard@gmail.com');
COMMIT;
/
INSERT INTO ROLE_TYPE VALUES (1,'user');
COMMIT;
/




--PERMISSION_DB connection grant
CREATE USER PERMISSION_DB IDENTIFIED BY p4ssw0rd;
GRANT CONNECT, RESOURCE TO PERMISSION_DB;
/

--PERMISSION_DB DDL
CREATE TABLE ACTIVITY
  (
    A_ID   INT,
    B_ID   INT,
    TV2_FN VARCHAR2(4000),
    A_ACTION VARCHAR2(4000),
    PRIMARY KEY(A_ID)
  );
/
CREATE TABLE ROLE_TYPE
  (
    RT_ID   INT,
    RT_NAME VARCHAR2(4000) UNIQUE,
    PRIMARY KEY(RT_ID)
  );
/
CREATE TABLE TV2_USER
  (
    TV2_ID       INT,
    TV2_FN       VARCHAR2(4000),
    TV2_LS       VARCHAR2(4000),
    TV2_USERNAME VARCHAR2(4000) UNIQUE NOT NULL,
    TV2_PASSWORD VARCHAR2(4000) NOT NULL,
    TV2_TEAM INT DEFAULT 0,
    RT_ID    INT DEFAULT 1 NOT NULL,
    TV2_EMAIL    VARCHAR2(4000),
    PRIMARY KEY(TV2_ID)
  );
/

CREATE TABLE STATUS
  (
    S_ID INT,
    S_NAME VARCHAR2(4000),
    PRIMARY KEY(S_ID)
  );
/
CREATE SEQUENCE role_type_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE activity_type_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE tv2_user_seq START WITH 1 INCREMENT BY 1;

/
CREATE OR REPLACE TRIGGER role_type_seq_trg BEFORE
  INSERT ON role_type FOR EACH ROW BEGIN IF :new.rt_id IS NULL THEN
  SELECT role_type_seq.NEXTVAL INTO :new.rt_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER activity_type_seq_trg BEFORE
  INSERT ON activity FOR EACH ROW BEGIN IF :new.a_id IS NULL THEN
  SELECT activity_type_seq.NEXTVAL INTO :new.a_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER activity_type_seq_trg2 BEFORE
  INSERT ON activity FOR EACH ROW BEGIN IF :new.a_id = 0 THEN
  SELECT activity_type_seq.NEXTVAL INTO :new.a_id FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER user_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID IS NULL THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/
create or replace TRIGGER user2_seq_trg BEFORE
  INSERT ON TV2_USER FOR EACH ROW BEGIN IF :new.TV2_ID = 0  THEN
  SELECT tv2_user_seq.NEXTVAL INTO :new.TV2_ID FROM dual;
END IF;
END;
/

COMMIT;
/


--PERMISSION_DB DML
INSERT INTO TV2_USER VALUES (1,'Jon','Snow','j','j',1,1,'imabastard@gmail.com');
COMMIT;
/
INSERT INTO ROLE_TYPE VALUES (1,'user');
COMMIT;
/




--SCRUMBOARDDISPLAY_DB connection grant
CREATE USER SCRUMBOARDDISPLAY_DB IDENTIFIED BY p4ssw0rd;
GRANT CONNECT, RESOURCE TO SCRUMBOARDDISPLAY_DB;
/

--SCRUMBOARDDISPLAY_DB DDL

--Lookup table
CREATE TABLE CARD
  (
    C_ID INT,
    L_ID INT,
    C_VERIFY INT,
    C_WORTH INT,
    C_TITLE VARCHAR2(4000),
    C_DESCRIPTION VARCHAR2(4000),
    PRIMARY KEY(C_ID)
  );
/

--Lookup table 1-Pending, 2-Approved, 3-Denied
CREATE TABLE TASK
  (
    T_ID   INT,
    C_ID INT,
    T_COMPLETE INT,
    T_INFO VARCHAR2(4000),
    PRIMARY KEY(T_ID)
  );
/
CREATE TABLE LANE
  (
    L_ID INT,
    B_ID INT,
    L_TITLE VARCHAR2(4000),
  PRIMARY KEY(L_ID)
  ); 
/
CREATE TABLE BOARD
  (
    B_ID INT,
    TV2_ID INT,
    B_TOTAL INT,  
    B_TITLE VARCHAR2(4000) UNIQUE,
    TV2_TEAM INT DEFAULT 0,
  PRIMARY KEY(B_ID)
  );
/
CREATE SEQUENCE card_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE board_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE lane_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE task_seq START WITH 1 INCREMENT BY 1;
/
create or replace TRIGGER board2_seq_trg BEFORE
  INSERT ON board FOR EACH ROW BEGIN IF :new.B_ID = 0  THEN
  SELECT board_seq.NEXTVAL INTO :new.B_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER card_seq_trg BEFORE
  INSERT ON card FOR EACH ROW BEGIN IF :new.C_ID IS NULL OR  :new.C_ID <= 0 THEN
  SELECT card_seq.NEXTVAL INTO :new.C_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER lane_seq_trg BEFORE
  INSERT ON lane FOR EACH ROW BEGIN IF :new.L_ID IS NULL OR :new.L_ID <= 0 THEN
  SELECT lane_seq.NEXTVAL INTO :new.L_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER task_seq_trg BEFORE
  INSERT ON task FOR EACH ROW BEGIN IF :new.T_ID IS NULL OR :new.T_ID <= 0 THEN
  SELECT task_seq.NEXTVAL INTO :new.T_ID FROM dual;
END IF;
END;
/
CREATE OR REPLACE TRIGGER board_seq_trg BEFORE
  INSERT ON board FOR EACH ROW BEGIN IF :new.B_ID IS NULL THEN
  SELECT board_seq.NEXTVAL INTO :new.B_ID FROM dual;
END IF;
END;
/

COMMIT;
/

--SCRUMBOARDDISPLAY_DB DML
INSERT INTO LANE VALUES (1, 1, 'To Do');
INSERT INTO LANE VALUES (2, 1, 'In Progress');
INSERT INTO LANE VALUES (3, 1, 'Testing');
INSERT INTO LANE VALUES (4, 1, 'Verify');
INSERT INTO LANE VALUES (5, 1, 'Done');
INSERT INTO LANE VALUES (6, 2, 'Testing');
COMMIT;
/

INSERT INTO CARD VALUES (1,1,0,4,'User can view profile','');
INSERT INTO CARD VALUES (2,1,0,5,'User can update profile','');
INSERT INTO CARD VALUES (3,2,0,5,'User can view boards','');
INSERT INTO CARD VALUES (4,2,0,5,'User can add boards','');
INSERT INTO CARD VALUES (5,3,0,2,'User can logout','');
INSERT INTO CARD VALUES (6,5,1,2,'User can login','');
COMMIT;
/




--BURNDOWNCHART_DB connection grant
CREATE USER BURNDOWNCHART_DB IDENTIFIED BY p4ssw0rd;
GRANT CONNECT, RESOURCE TO BURNDOWNCHART_DB;
/


--BURNDOWNCHART_DB DDL
CREATE TABLE CHART
(
    CHART_ID INT,
    B_ID INT,
    CHART_SUM INT,
    CHART_DATE DATE DEFAULT SYSDATE NOT NULL,
    PRIMARY KEY(CHART_ID)
);
/

CREATE SEQUENCE chart_seq START WITH 1 INCREMENT BY 1;
/

create or replace TRIGGER chart_seq_trg2 BEFORE
  INSERT ON chart FOR EACH ROW BEGIN IF :new.CHART_ID = 0  THEN
  SELECT chart_seq.NEXTVAL INTO :new.CHART_ID FROM dual;
END IF;
END;
/

create or replace TRIGGER chart_seq_trg BEFORE
  INSERT ON chart FOR EACH ROW BEGIN IF :new.CHART_ID IS null  THEN
  SELECT chart_seq.NEXTVAL INTO :new.CHART_ID FROM dual;
END IF;
END;
/

COMMIT;
/


--BURNDOWNCHART_DB DML
INSERT INTO CHART(B_ID,CHART_SUM,CHART_DATE) VALUES (1,100,SYSDATE);
INSERT INTO CHART(B_ID,CHART_SUM,CHART_DATE) VALUES (1,80,SYSDATE);
INSERT INTO CHART(B_ID,CHART_SUM,CHART_DATE) VALUES (1,40,SYSDATE);
INSERT INTO CHART(B_ID,CHART_SUM,CHART_DATE) VALUES (1,20,SYSDATE);
INSERT INTO CHART(B_ID,CHART_SUM,CHART_DATE) VALUES (1,0,SYSDATE);
/

COMMIT;
/

EXIT;
/